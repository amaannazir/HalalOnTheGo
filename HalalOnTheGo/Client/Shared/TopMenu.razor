@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@implements IDisposable

<BlazoredTypeahead SearchMethod="@SearchProduct" 
                      TValue="Product"
                      TItem="Product"
                      Value="selectedProduct" 
                      ValueChanged="HandleSearch"
                       ValueExpression="@(() => selectedProduct)" placeholder="Search for meat...">
    <SelectedTemplate>
        @context.Title
    </SelectedTemplate>
    <ResultTemplate>
        @context.Title
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, we currently dont offer this :( but don't worry - we still offer plenty more delicious meats, try searching again for something else!
    </NotFoundTemplate>
</BlazoredTypeahead>

<AuthorizeView>
    <Authorized>
        <a href="cart" class="btn btn-info">
  <i class="oi oi-cart"></i>
   Cart
  <span class="badge badge-pill badge-light">@GetProductCount()</span>
</a>
    </Authorized>
</AuthorizeView>

 

@code 
{
    private Product selectedProduct;
    //Overrides the OnInitialized method.
    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged; //Subscribe the StateHasChanged method to the OnChange event of the CartService. This ensures that when the cart is updated, the component will re-render.
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged; //DISPOSES OF / THE OPPOSITe of the above code
    }

    private int GetProductCount()
    {
        var cart = LocalStorage.GetItem<List<ProductVariant>>("cart");
        return cart != null ? cart.Count : 0; //SIMPLIFIED IF STATEMENT
    }

    private void HandleSearch(Product product)
    {
        if (product == null) return;
        selectedProduct = product;
        NavigationManager.NavigateTo($"product/{selectedProduct.Id}");
    }

    private async Task<IEnumerable<Product>> SearchProduct(string searchText)
    {
        var response = await ProductService.SearchProducts(searchText);
        return response;
    }

}
 

