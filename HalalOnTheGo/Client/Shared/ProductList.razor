@inject IProductService ProductService
@implements IDisposable

<ul class = "list-unstyled">
    @foreach (var product in ProductService.Products)
   {
       <li class = "media my-3">
           <div class = "media-img-wrapper mr-2">
               <a href = "/product/@product.Id">
               <img class = "media-img" src ="@product.Image" alt = "@product.Title"/>
               </a>
           </div>
           <div class = "media-body">
               <a href = "/product/@product.Id">
                   <h4 class = "mb-0"> @product.Title</h4>
               </a>
               <p>  @product.Description</p>
                @if(product.OriginalPrice > product.Price)
                {
                    <h6 class ="text-muted original-price">£@product.OriginalPrice </h6>
                }
                <h5 class = "price">
                    £@product.Price
                </h5>
            </div>
       </li>
   }
</ul>


@code {
    // [Parameter]
    // public int? CategoryId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        // await ProductService.LoadProducts(); //DEPENDENCY INJECTION TO LOAD ALL PRODUCTS FROM THE PRODUCT SERVICE LIST.
        ProductService.OnChange += StateHasChanged; //Change EVENT invoked - will load products by catgepry correctly.
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged; //DISPOSE OF THE EVENT AFTER CALLED. 
    }

}
