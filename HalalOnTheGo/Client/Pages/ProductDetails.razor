@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService

<div class = "media"> 
    <div class = "media-img-big-wrapper mr-2">
        <img class = "media-img-big" src="@product.Image" alt="@product.Title" />
    </div>
    <div class = "media-body">
        <h2 class="mb-0">@product.Title</h2>
      <p>@product.Description</p>
        @if (product.Variants != null && product.Variants.Count > 0)
        {
            <div class ="form-group"> 
                <select class ="form-control" @bind="currentEditionId">
                    @foreach(var variant in product.Variants)   //SELECT A PRODUCT DROP MENU CODE BLOCK!  
                    {                                            
                        <option value="@variant.EditionId">@variant.Edition.Name</option>  //Pulls the Variants and the Editions in the DataContext!
                    }
                </select>
                </div>
        }
        @if (GetSelectedVariant() != null) // THIS IF BLOCK Gets The Price for different selected VARIANTS!!
        {
            @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
            {
                <h6 class = "text-muted original-price ">£@GetSelectedVariant().OriginalPrice</h6>
            }
            <h4 class = "price">
                £@GetSelectedVariant().Price
        </h4>
        }
        <button class = "btn btn-primary" @onclick ="AddToCart"><i class = "oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add To Cart</button>
    </div>

</div>

@code {
    private Product product = new Product();

    private int currentEditionId = 1;

    [Parameter]
    public int Id { get; set; }

    //OnInitializedAsync() is an override method that gets called when the component is initialized asynchronously. It fetches product information from the ProductService based on the provided Id, and upon a successful retrieval, it sets the currentEditionId to the EditionId of the first variant in the product's list of variants, if any exist.

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetProduct(Id);
        if(product.Variants.Count > 0)
        {
            currentEditionId = product.Variants[0].EditionId;
        }
    }


    // GetSelectedVariant() retrieves the product variant associated with the currently selected edition by querying the list of variants for a match based on the EditionId. If found, the matching variant is returned; otherwise, null is returned.

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.EditionId == currentEditionId);
        return variant;
    }

    private async Task AddToCart()
    {
        // Retrieve the 'cart' from local storage asynchronously using the LocalStorage service. If the 'cart' is not found (null), initialize it as a new List<ProductVariant>.

        //  var cart = await LocalStorage.GetItemAsync<List<ProductVariant>>("cart");
        //  if (cart == null)
        //   {
        //     cart = new List<ProductVariant>();
        //  }

        // Add the currently selected product variant (obtained using GetSelectedVariant()) to the 'cart'. After updating the 'cart', persist the changes asynchronously by storing it in local storage.
        //cart.Add(GetSelectedVariant());
        // await LocalStorage.SetItemAsync("cart", cart);
        // ToastService.ShowSuccess("Added to cart: " + product.Title); //POP UP NOTIFICATION WHEN ADDING A PRODUCT TO CART!

        await CartService.AddToCart(GetSelectedVariant());
    }

    } 
