@page "/cart"
@inject ICartService CartService

<h3>Shopping Cart</h3>

@if(cartItems == null || cartItems.Count <= 0) //Display message to user if cart is empty
{
    <span>Aw, your cart looks a bit lonely! How about we fill it with some fantastic finds? Time to get your dinner table ready! </span>
}
else
{ //LINE 24 - Calculates the sum of all the cart items and displays the price with the sum of items!
    <div>
        @foreach (var item in cartItems)
       {
           <div class="item-container">
               <div class="item-image-wrapper"><img src="@item.Image" class="item-image"/></div>
               <div class="item-name">
                   <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                   <span>@item.EditionName</span><br />
                   <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
               </div>
               <div class="item-price">£@item.Price</div>
               </div> 
       }
       <div class="item-price"> 
           Total (@cartItems.Count): £@cartItems.Sum(item => item.Price)
       </div>
    </div>
}

@code 
{
    List<CartItem> cartItems = new List<CartItem>();

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItems(); //Asynchronously retrieves cart items using the GetCartItems method of the CartService.
    }

    private async Task DeleteItem(CartItem item)
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
    }
}
