@page "/cart"
@inject ICartService CartService
@inject NavigationManager NavigationManager

@if (!orderPlaced) //If the order is not placed, display the shopping cart with all the meat items, prices, ability to change quantity and delete item and order button!
{
    <h3>Shopping Cart</h3>

    @if(cartItems == null || cartItems.Count <= 0) //Display message to user if cart is empty
{
    <span>Aw, your cart looks a bit lonely! How about we fill it with some fantastic finds? Time to get your dinner table ready! </span>
}
else
{ //- Calculates the sum of all the cart items and displays the price with the sum of items!
     // LINE 23 AND 26 - Multiply the price by quantity so if user wants to buy multiple items of the same product the total is reflected in that. 
    <div>
        @foreach (var item in cartItems)
       {
           <div class="item-container">
               <div class="item-image-wrapper"><img src="@item.Image" class="item-image"/></div>
               <div class="item-name">
                   <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                   <span>@item.EditionName</span><br />
                   <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
                   <EditForm Model="item">
                       <InputNumber id="quantity" @bind-Value="item.Quantity" class="form-control" style="width: 70px"></InputNumber>
                   </EditForm>
               </div>
               <div class="item-price">£@(item.Price * item.Quantity)</div>
               </div> 
       }
       <div class="item-price"> 
           Total (@cartItems.Count): £@cartItems.Sum(item => item.Price * item.Quantity)
       </div>
      <div style="text-align: center; margin-top: 10px;">
          <button class="btn btn-primary btn-lg" @onclick="PlaceOrder">Get My Meat!</button>
      </div>
    </div>
    }
}
else //If order IS placed, display the products and total price to user. But remove the edit form for quantity and the delete/place order button!
{
    <h3 style = "text-align: center;">Thank you for ordering from HalalOnTheGo, your trusted University supplier! </h3>
    <p>You've chosen halal meat, ensuring it meets the highest standards of quality and adherence to Islamic dietary laws.</p>
    <h4 style = "text-align: center;">Here's what you'll get: </h4>

    <div>
        @foreach (var item in cartItems)
       {
           <div class="item-container">
               <div class="item-image-wrapper"><img src="@item.Image" class="item-image"/></div>
               <div class="item-name">
                   <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                   <span>@item.EditionName</span><br />
               </div>
               <div class="item-price">£@(item.Price * item.Quantity)</div>
               </div> 
       }
       <div class="item-price"> 
           Total (@cartItems.Count): £@cartItems.Sum(item => item.Price * item.Quantity)
       </div>
    </div>
}


@code 
{
    List<CartItem> cartItems = new List<CartItem>();
    bool orderPlaced = false;
    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItems(); //Asynchronously retrieves cart items using the GetCartItems method of the CartService.
    }

    private async Task DeleteItem(CartItem item) //Method is called when user click delete link in cart
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
    }

    private async Task PlaceOrder() //Place order button, this method is called. MAKES CALL TO STRIPE CHECKOUT SERVICES, Empties the cart as order has been placed. 
    {
        string checkoutUrl = await CartService.Checkout(); //Calls checkout service method for stripe checkout
        NavigationManager.NavigateTo(checkoutUrl); //Navigation manager takes user to STRIPE CHECKOUT FOR PAYMENT AND ORDER PLACING.
        await CartService.EmptyCart();
    }
}
