@page "/login"
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService ToastService

<br />
<br />
<br />
<br />
<br />

<h3 class="home-title">Login</h3>
<br />
<br />
<h4 class="mb-0">Login to my account</h4>
<br />
<p class="text"><b><i>Enter your student email address and password</i></b></p>

<EditForm Model="user" OnSubmit="HandleLogin">
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.StudentEmail" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" type="password" class="form-control"></InputText>
        <button class="loginbtn" type ="submit"><b>Login</b></button>
    </div>
    <br />

    <p class= "signuptextonform"> <b><i> Don't have an account?  <a href="/signup">Sign up here</a></i></b></p>
</EditForm>

@code {
    private User user = new User(); //Model initialized for EditForm! 
    

    private async void HandleLogin()
    {
        if (string.IsNullOrEmpty(user.StudentEmail) || string.IsNullOrEmpty(user.Password))
        {
            // If email or password is empty, display toast message.
            ToastService.ShowError("Please fill in all fields before attempting to sign in.");
            return;
        }


        if (!user.StudentEmail.EndsWith(".ac.uk"))
        {
            // If email does not end with ".ac.uk", display toast message.
            ToastService.ShowError("Please enter a valid University Email address.");
            return;
        }

        

        //if (user.StudentEmail == null)
        //{

          //  ToastService.ShowError("Please enter your email");
            //return;
        //}

       // if (user.Password == null)
        //{

           // ToastService.ShowError("Please enter your password");
            //return;
        //}

        

        await LocalStorage.SetItemAsync<string>("email", user.StudentEmail);
        await AuthStateProvider.GetAuthenticationStateAsync(); //This method will get the current user authentication state, authorized or NOT authorized. 
        NavigationManager.NavigateTo("");
    }
}
